version: "3"

# Указываем, какие сервисы DC должен сбилдить и запустить
services:
  frontend:
    build: ./frontend
    container_name: docker-frontend
    command: serve -s build -l 3000
    # Порты описано внутри *nginx\nginx.conf.prod*
    # ports:
    #   - "3000:3000"
    restart: unless-stopped
    networks: 
      - docker-app-network


  # Сервис 'api'
  api:
    # DC берёт DF из папки './api' и на базе этого файла - создает контейнер
    build: ./api
    # Задаем имя контейнеру, которое будет отображаться при вводе комманды `docker ps`
    container_name: docker-api
    # Задаем комманду, для запуска приложения внутри контейнера
    command: npm run start
    # Если контейнер внепланово произошла ошибка - DC заново запустит контейнер
    restart: unless-stopped
    # Добавляем порты, которые данный контейнер будет использовать
    ports:
      # Пробрасываем порт контейнера наружу:
      # хост:контейнер
      - "3001:3201"
    # Задаем переменные окружения - они будут доступны в коде из process.env.PORT, ...
    environment:
      # Порт внутри контейнера
      - PORT=3201
      - HOST=http://docker-app-1.com
      # MONGO_URL начинается с 'mongodb://', далее имя сервиса, в котором находится БД - 'api_db:', далее стандартный порт mongo - '27017'
      - MONGO_URL=mongodb://api_db:27017/api

      # Создаем переменную AUTH_API_URL, с помощью которой мы 
      # сможем из 'api-сервиса' обращаться к 'auth-сервису'
      # по специальному хосту http://auth, который нам предоставляет docker -
      # где http://auth - имя 'auth-сервиса'
      # 3202 - порт контейнера 'auth-сервиса'
      # api - просто строка
      - AUTH_API_URL=http://auth:3202/api 

    # Задаем сервисы, без которых сервис 'api' не может существовать
    depends_on:
      # Запуск сервиса 'api' выполнять после сервиса сервиса 'api_db'
      - api_db
    networks: 
      - docker-app-network


  # Сервис 'auth'
  auth:
    # DC берёт DF из папки './auth' и на базе этого файла - создает контейнер
    build: ./auth
    # Задаем имя контейнеру, которое будет отображаться при вводе комманды `docker ps`
    container_name: docker-auth
    # Задаем комманду, для запуска приложения внутри контейнера
    command: npm run start
    # Если контейнер внепланово произошла ошибка - DC заново запустит контейнер
    restart: unless-stopped
    # Добавляем порты, которые данный контейнер будет использовать
    ports:
      # Пробрасываем порт контейнера наружу:
      # хост:контейнер
      - "3002:3202"
    # Задаем переменные окружения - они будут доступны в коде из process.env.PORT, ...
    environment:
      # Порт внутри контейнера
      - PORT=3202
      - HOST=http://docker-app-1.com
      # MONGO_URL начинается с 'mongodb://', далее имя сервиса, в котором находится БД - 'api_db:', далее стандартный порт mongo - '27017'
      - MONGO_URL=mongodb://auth_db:27017/auth

      # Создаем переменную API_URL, с помощью которой мы 
      # сможем из 'auth-сервиса' обращаться к 'api-сервису'
      # по специальному хосту http://api, который нам предоставляет docker -
      # где http://api - имя 'api-сервиса'
      # 3201 - порт контейнера 'api-сервиса'
      # api - просто строка
      - API_URL=http://api:3201/api

    # Задаем сервисы, без которых сервис 'api' не может существовать
    depends_on:
      # Запуск сервиса 'auth' выполнять после сервиса сервиса 'auth_db'
      - auth_db
    networks: 
      - docker-app-network


  # Сервис 'api_db'
  api_db:
    # Качаем образ mongo, на базе которого нужно создать данный сервис
    image: mongo:latest
    # Задаем имя контейнеру, которое будет отображаться при вводе комманды `docker ps`
    container_name: docker-api_db
    # Указываем volume для данного контейнера, чтобы сохранить базу данных на хосте
    volumes:
      # mongodb_api - имя, которое мы присваиваем для volume
      # /data/db - место, где mongo хранит данные
      # То-есть мы говорим, что volume с именем mongodb_api на хосте конектится к /data/db внутри контейнера
      - mongodb_api:/data/db
    networks: 
      - docker-app-network


  # Сервис 'auth_db'
  auth_db:
    # Качаем образ mongo, на базе которого нужно создать данный сервис
    image: mongo:latest
    # Задаем имя контейнеру, которое будет отображаться при вводе комманды `docker ps`
    container_name: docker-auth_db
    # Указываем volume для данного контейнера, чтобы сохранить базу данных на хосте
    volumes:
      # mongodb_auth - имя, которое мы присваиваем для volume
      # /data/db - место, где mongo хранит данные
      # То-есть мы говорим, что volume с именем mongodb_auth на хосте конектится к /data/db внутри контейнера
      - mongodb_auth:/data/db
    networks: 
      - docker-app-network

      
  # Сервис 'nginx'
  nginx:
    # Качаем образ nginx, на базе которого нужно создать данный сервис
    image: nginx:stable-alpine
    # Задаем имя контейнеру, которое будет отображаться при вводе комманды `docker ps`
    container_name: docker-nginx
    ports:
      # Говорим, что к 80-му порту контейнера можно получить доступ через
      # 80-й порт хоста.
      # хост:контейнер 
      - "80:80"
    # Указываем volume для данного контейнера, чтобы сохранить его на хосте
    volumes: 
      # Данные хоста по адрессу ./nginx/nginx.conf.prod положить
      # внутрь контейнера по адрессу /etc/nginx/conf.d/nginx.conf
      - ./nginx/nginx.conf.prod:/etc/nginx/conf.d/nginx.conf
    depends_on: 
      # Сервис frontend должен быть доступен раньше, чем сервис nginx, 
      # иначе nginx упадет, если он не сможет спроксировать запрос на сервис, 
      # который ранится
      - frontend
    networks: 
      - docker-app-network

# Запись ниже говорит, что мы можем использовать volume с именем mongodb_api и mongodb_auth в любом нашем сервисе 
volumes:
  mongodb_api:
  mongodb_auth:

# Указываем какие сети будут внутри нашего приложения
networks: 
  # Указываем имя сети - docker-app-network
  docker-app-network:
    # Указываем драйвер - по дефолту это bridge
    driver: bridge
# Далее имя этой сети нужно указать во всех сервиссах,
# которые нужно подключить к этой сети
