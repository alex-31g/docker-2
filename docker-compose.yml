version: "3"

# Указываем, какие сервисы DC должен сбилдить и запустить
services:
  frontend:
    build: ./frontend
    container_name: docker-frontend
    command: serve -s build -l 3000
    ports:
      - "3000:3000"
    restart: unless-stopped

  # Сервис 'api'
  api:
    # DC берёт DF из папки './api' и на базе этого файла - создает контейнер
    build: ./api
    # Задаем имя контейнеру, которое будет отображаться при вводе комманды `docker ps`
    container_name: docker-api
    # Задаем комманду, для запуска приложения внутри контейнера
    command: npm run start
    # Если контейнер внепланово произошла ошибка - DC заново запустит контейнер
    restart: unless-stopped
    # Добавляем порты, которые данный контейнер будет использовать
    ports:
      # Пробрасываем порт контейнера наружу:
      # хост:контейнер
      - "3001:3201"
    # Задаем переменные окружения - они будут доступны в коде из process.env.PORT, ...
    environment:
      # Порт внутри контейнера
      - PORT=3201
      - HOST=http://docker-app.com
      # MONGO_URL начинается с 'mongodb://', далее имя сервиса, в котором находится БД - 'api_db:', далее стандартный порт mongo - '27017'
      - MONGO_URL=mongodb://api_db:27017/api
    # Задаем сервисы, без которых сервис 'api' не может существовать
    depends_on:
      # Запуск сервиса 'api' выполнять после сервиса сервиса 'api_db'
      - api_db

  # Сервис 'auth'
  auth:
    # DC берёт DF из папки './auth' и на базе этого файла - создает контейнер
    build: ./auth
    # Задаем имя контейнеру, которое будет отображаться при вводе комманды `docker ps`
    container_name: docker-auth
    # Задаем комманду, для запуска приложения внутри контейнера
    command: npm run start
    # Если контейнер внепланово произошла ошибка - DC заново запустит контейнер
    restart: unless-stopped
    # Добавляем порты, которые данный контейнер будет использовать
    ports:
      # Пробрасываем порт контейнера наружу:
      # хост:контейнер
      - "3002:3202"
    # Задаем переменные окружения - они будут доступны в коде из process.env.PORT, ...
    environment:
      # Порт внутри контейнера
      - PORT=3202
      - HOST=http://docker-app.com
      # MONGO_URL начинается с 'mongodb://', далее имя сервиса, в котором находится БД - 'api_db:', далее стандартный порт mongo - '27017'
      - MONGO_URL=mongodb://auth_db:27017/auth
    # Задаем сервисы, без которых сервис 'api' не может существовать
    depends_on:
      # Запуск сервиса 'auth' выполнять после сервиса сервиса 'auth_db'
      - auth_db

  # Сервис 'api_db'
  api_db:
    # Задаем имя image, на базе которого нужно создать данный сервис
    image: mongo:latest
    # Задаем имя контейнеру, которое будет отображаться при вводе комманды `docker ps`
    container_name: docker-api_db
    # Указываем volume для данного контейнера, чтобы сохранить базу данных на хосте
    volumes:
      # mongodb_api - имя, которое мы присваиваем для volume
      # /data/db - место, где mongo хранит данные
      # То-есть мы говорим, что volume с именем mongodb_api на хосте конектится к /data/db внутри контейнера
      - mongodb_api:/data/db

  # Сервис 'auth_db'
  auth_db:
    # Задаем имя image, на базе которого нужно создать данный сервис
    image: mongo:latest
    # Задаем имя контейнеру, которое будет отображаться при вводе комманды `docker ps`
    container_name: docker-auth_db
    # Указываем volume для данного контейнера, чтобы сохранить базу данных на хосте
    volumes:
      # mongodb_auth - имя, которое мы присваиваем для volume
      # /data/db - место, где mongo хранит данные
      # То-есть мы говорим, что volume с именем mongodb_auth на хосте конектится к /data/db внутри контейнера
      - mongodb_auth:/data/db

# Запись ниже говорит, что мы можем использовать volume с именем mongodb_api и mongodb_auth в любом нашем сервисе 
volumes:
  mongodb_api:
  mongodb_auth: